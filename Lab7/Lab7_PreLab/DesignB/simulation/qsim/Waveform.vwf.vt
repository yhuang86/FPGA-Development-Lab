// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2019 14:20:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DesignB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DesignB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EN;
reg X0;
reg X1;
reg X2;
reg X3;
// wires                                               
wire F1;
wire F2;

// assign statements (if any)                          
DesignB i1 (
// port map - connection between master ports and signals/registers   
	.EN(EN),
	.F1(F1),
	.F2(F2),
	.X0(X0),
	.X1(X1),
	.X2(X2),
	.X3(X3)
);
initial 
begin 
#160000 $finish;
end 

// EN
initial
begin
	EN = 1'b1;
end 

// X3
always
begin
	X3 = 1'b0;
	X3 = #80000 1'b1;
	#80000;
end 

// X2
always
begin
	X2 = 1'b0;
	X2 = #40000 1'b1;
	#40000;
end 

// X1
always
begin
	X1 = 1'b0;
	X1 = #20000 1'b1;
	#20000;
end 

// X0
always
begin
	X0 = 1'b0;
	X0 = #10000 1'b1;
	#10000;
end 
endmodule

