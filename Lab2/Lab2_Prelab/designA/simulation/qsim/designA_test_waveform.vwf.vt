// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/08/2019 20:59:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          designA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module designA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
// wires                                               
wire f;

// assign statements (if any)                          
designA i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.f(f)
);
initial 
begin 
#160000 $finish;
end 

// a
initial
begin
	a = 1'b0;
	a = #80000 1'b1;
end 

// b
initial
begin
	b = 1'b0;
	b = #40000 1'b1;
	b = #40000 1'b0;
	b = #40000 1'b1;
end 

// c
initial
begin
	c = 1'b0;
	c = #20000 1'b1;
	c = #20000 1'b0;
	c = #20000 1'b1;
	c = #20000 1'b0;
	c = #20000 1'b1;
	c = #20000 1'b0;
	c = #20000 1'b1;
end 
endmodule

